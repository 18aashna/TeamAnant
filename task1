#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>


#define MAX 100

void parent(int fd) {
    char msg[] = "Hello World";
    
    // Write to file
    write(fd, msg, sizeof(msg));
    close(fd);
}

void child(int fd) {
    char buff[MAX];
    int bytes_read;

    // Read from file
    bytes_read = read(fd, buff, MAX);
    close(fd);

    // Print what child read
    if (bytes_read > 0) {
        printf("Child process read: %.*s\n", bytes_read, buff);
    } else {
        printf("Child process read empty file.\n");
    }
}

int main() {
    int fd;
    pid_t pid;

   
   if (fd = open("temp.txt", O_RDWR | O_CREAT | O_TRUNC)<0){
        perror("Error opening file");
        return OPEN_ERR;
    }

    // Fork a child process
    pid = fork();

    if (pid < 0) {
        perror("Fork failed");
        return IOCTL_ERR;
    } else if (pid == 0) {
        child_process(fd);
    } else {
        // Parent process
        parent_process(fd);
        wait(NULL);
    }

    return EXIT_SUCCESS;
}
